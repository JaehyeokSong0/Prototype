import streamlit as st
from openai import OpenAI
import json
from datetime import datetime
from io import BytesIO
import streamlit.components.v1 as components

# --- ÌéòÏù¥ÏßÄ ÏÑ§Ï†ï ---
st.set_page_config(
    page_title="AI ÌïôÏäµ Î°úÎìúÎßµ ÏÉùÏÑ±Í∏∞",
    page_icon="üó∫Ô∏è",
    layout="wide"
)

# --- Session State Ï¥àÍ∏∞Ìôî ---
# OpenAI ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Î∞è API ÌÇ§
if 'openai_api_key' not in st.session_state:
    st.session_state.openai_api_key = ""
if 'openai_client' not in st.session_state:
    st.session_state.openai_client = None

# UI ÏÉÅÌÉú
if 'current_topic' not in st.session_state:
    st.session_state.current_topic = ""
if 'current_level' not in st.session_state:
    st.session_state.current_level = "Í∏∞Ï¥à ÏßÄÏãù ÏûàÏùå"
if 'current_detailed_level' not in st.session_state:
    st.session_state.current_detailed_level = ""
if 'current_duration' not in st.session_state:
    st.session_state.current_duration = "2Í∞úÏõî"
if 'current_dev_mode' not in st.session_state:
    st.session_state.current_dev_mode = False

# Í≥†Í∏â ÏÑ§Ï†ï (Í∞úÎ∞úÏûê Î™®Îìú)
if 'current_model' not in st.session_state:
    st.session_state.current_model = "gpt-4o-mini"
if 'current_temperature' not in st.session_state:
    st.session_state.current_temperature = 0.7
if 'current_max_tokens' not in st.session_state:
    st.session_state.current_max_tokens = 2000

# ÏÉùÏÑ±Îêú Í≤∞Í≥ºÎ¨º
if 'generated_roadmap' not in st.session_state:
    st.session_state.generated_roadmap = None

# --- ÌïµÏã¨ Í∏∞Îä• Ìï®Ïàò ---

def init_openai():
    """OpenAI ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï¥àÍ∏∞Ìôî"""
    if st.session_state.openai_api_key:
        try:
            st.session_state.openai_client = OpenAI(api_key=st.session_state.openai_api_key)
            return True
        except Exception as e:
            st.error(f"OpenAI ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï¥àÍ∏∞Ìôî Ïã§Ìå®: {e}")
            return False
    return False

def generate_roadmap(topic, level, detailed_level, duration, model, temperature, max_tokens):
    """AIÎ•º ÏÇ¨Ïö©Ìï¥ Í∏∞Î≥∏ Î°úÎìúÎßµ ÏÉùÏÑ±"""
    current_date = datetime.now().strftime("%YÎÖÑ %mÏõî")
    level_info = f"Í∏∞Î≥∏ ÏàòÏ§Ä: {level}"
    if detailed_level.strip():
        level_info += f"\nÏÉÅÏÑ∏ ÏÑ§Î™Ö: {detailed_level}"

    prompt = f"""
    **Ï§ëÏöî: Î∞òÎìúÏãú Ïú†Ìö®Ìïú JSON ÌòïÏãùÏúºÎ°úÎßå ÏùëÎãµÌïòÏÑ∏Ïöî. {current_date} Í∏∞Ï§Ä ÏµúÏã† Ï†ïÎ≥¥Îßå ÏÇ¨Ïö©ÌïòÏÑ∏Ïöî.**
    
    ÌïôÏäµ Ï£ºÏ†ú: {topic}
    {level_info}
    ÌïôÏäµ Í∏∞Í∞Ñ: {duration}
    
    ÏúÑ Ï†ïÎ≥¥Î•º Î∞îÌÉïÏúºÎ°ú **{current_date} ÌòÑÏû¨ ÏµúÏã† Î≤ÑÏ†Ñ Í∏∞Ï§Ä**ÏúºÎ°ú Ï≤¥Í≥ÑÏ†ÅÏù¥Í≥† Íµ¨Ï≤¥Ï†ÅÏù∏ ÌïôÏäµ Î°úÎìúÎßµÏùÑ ÏÉùÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî.
    
    **ÌïÑÏàò ÏöîÍµ¨ÏÇ¨Ìï≠:**
    1. Î∞òÎìúÏãú Ïú†Ìö®Ìïú JSON ÌòïÏãùÏúºÎ°úÎßå ÏùëÎãµ
    2. Í∞Å Ï£ºÏ∞®Î≥ÑÎ°ú Íµ¨Ï≤¥Ï†ÅÏù¥Í≥† Ïã§Ìñâ Í∞ÄÎä•Ìïú ÌïôÏäµ ÎÇ¥Ïö© Ï†úÏãú
    3. Ïã§Ï†ú ÏôÑÏÑ±Ìï† Ïàò ÏûàÎäî ÌîÑÎ°úÏ†ùÌä∏ÎÇò Ïã§Ïäµ Í≥ºÏ†ú Ìè¨Ìï®
    4. ÌïôÏäµ ÌõÑ Îã¨ÏÑ±Ìï† Ïàò ÏûàÎäî Î™ÖÌôïÌïú Í∏∞Ïà†Ï†Å Î™©Ìëú ÏÑ§Ï†ï
    5. Í∞Å Ï£ºÏ∞®Î≥ÑÎ°ú ÏÑúÎ°ú Îã§Î•∏ Ïã¨Ìôî ÎÇ¥Ïö©ÏúºÎ°ú ÏßÑÌñâ
    6. Î™®Îì† Ï†ïÎ≥¥Îäî 2024ÎÖÑ Îßê ~ 2025ÎÖÑ ÏµúÏã† Î≤ÑÏ†Ñ Í∏∞Ï§Ä
    
    **ÏòàÏãú (Unity ML-AgentsÏùò Í≤ΩÏö∞):**
    - Î™®Ìò∏Ìï®: "ML-Agents Í∏∞Ï¥à ÌïôÏäµ" ‚ùå
    - Íµ¨Ï≤¥Ï†Å: "Í∞ÑÎã®Ìïú Í≥µ Íµ¥Î¶¨Í∏∞ ÏóêÏù¥Ï†ÑÌä∏ Íµ¨ÌòÑÌïòÏó¨ Î™©Ìëú ÏßÄÏ†ê ÎèÑÎã¨ ÌïôÏäµ" ‚úÖ
    
    Ï†ïÌôïÌûà Îã§Ïùå JSON ÌòïÏãùÏúºÎ°úÎßå ÏùëÎãµÌïòÏÑ∏Ïöî:
    {{
        "roadmap": [
            {{
                "week": 1,
                "title": "Íµ¨Ï≤¥Ï†ÅÏù∏ Ï£ºÏ∞® Ï†úÎ™©",
                "topics": ["Íµ¨Ï≤¥Ï†ÅÏù∏ Í∏∞Ïà†Ïù¥ÎÇò Í∞úÎÖê", "Ïã§Ï†ú Íµ¨ÌòÑÌï† Í∏∞Îä•"],
                "practical_tasks": ["Ïã§Ï†úÎ°ú ÎßåÎì§ ÌîÑÎ°úÏ†ùÌä∏", "ÏôÑÏÑ±Ìï† ÏΩîÎìúÎÇò Í∏∞Îä•"],
                "resources": ["Íµ¨Ï≤¥Ï†ÅÏù∏ ÌïôÏäµ Î∞©Î≤ï (Ïòà: Unity Í≥µÏãù ÌäúÌÜ†Î¶¨Ïñº 3Ïû•)", "ÌäπÏ†ï GitHub Ï†ÄÏû•ÏÜå Î∂ÑÏÑù"],
                "goals": "Ïù¥Î≤à Ï£º ÏôÑÎ£å ÌõÑ Ï†ïÌôïÌûà Ìï† Ïàò ÏûàÍ≤å ÎêòÎäî Í≤É",
                "deliverables": ["Ï†úÏ∂úÌïòÍ±∞ÎÇò ÏôÑÏÑ±Ìï† Íµ¨Ï≤¥Ï†ÅÏù∏ Í≤∞Í≥ºÎ¨º"],
                "week_specific_keywords": ["Ïù¥Î≤à Ï£ºÏ∞®ÏóêÎßå Ìï¥ÎãπÌïòÎäî Í≤ÄÏÉâ ÌÇ§ÏõåÎìú"]
            }}
        ],
        "prerequisites": ["Íµ¨Ï≤¥Ï†ÅÏù∏ ÏÇ¨Ï†Ñ ÏßÄÏãùÏù¥ÎÇò ÏÑ§ÏπòÌï† ÎèÑÍµ¨"],
        "final_goals": ["ÏµúÏ¢ÖÏ†ÅÏúºÎ°ú ÎßåÎì§ Ïàò ÏûàÍ≤å ÎêòÎäî Íµ¨Ï≤¥Ï†ÅÏù∏ ÌîÑÎ°úÏ†ùÌä∏ÎÇò Í∏∞Îä•"],
        "version_info": "ÏµúÏã† Î≤ÑÏ†Ñ Ï†ïÎ≥¥",
        "last_updated": "{current_date}",
        "difficulty_progression": "ÎÇúÏù¥ÎèÑ ÏßÑÌñâ ÏÑ§Î™Ö"
    }}
    
    **Ï§ëÏöî**: Î™®Îì† ÎÇ¥Ïö©ÏùÄ Ïã§Ï†úÎ°ú Ïã§Ìñâ Í∞ÄÎä•ÌïòÍ≥† Ï∏°Ï†ï Í∞ÄÎä•Ìïú Íµ¨Ï≤¥Ï†ÅÏù∏ ÎÇ¥Ïö©ÏúºÎ°úÎßå ÏûëÏÑ±ÌïòÏÑ∏Ïöî.
    Îã§Î•∏ ÏÑ§Î™Ö ÏóÜÏù¥ Ïò§ÏßÅ JSONÎßå ÏùëÎãµÌïòÏÑ∏Ïöî.
    """
    
    try:
        if not st.session_state.openai_client:
            st.error("OpenAI ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏Í∞Ä Ï¥àÍ∏∞ÌôîÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.")
            return None
            
        response = st.session_state.openai_client.chat.completions.create(
            model=model,
            messages=[
                {"role": "system", "content": "ÎãπÏã†ÏùÄ Í∞úÎ∞úÏûêÎ•º ÏúÑÌïú ÌïôÏäµ Î°úÎìúÎßµ Ï†ÑÎ¨∏Í∞ÄÏûÖÎãàÎã§. Ìï≠ÏÉÅ JSON ÌòïÏãùÏúºÎ°ú ÏùëÎãµÌïòÏÑ∏Ïöî."},
                {"role": "user", "content": prompt}
            ],
            temperature=temperature,
            max_tokens=max_tokens,
            response_format={"type": "json_object"}
        )
        
        content = response.choices[0].message.content
        return json.loads(content)

    except json.JSONDecodeError as json_error:
        st.error(f"JSON ÌååÏã± Ïò§Î•ò: {str(json_error)}")
        st.error("AIÍ∞Ä Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ JSONÏùÑ Î∞òÌôòÌñàÏäµÎãàÎã§. Î™®Îç∏ ÏÑ§Ï†ïÏùÑ Ï°∞Ï†ïÌïòÍ±∞ÎÇò Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.")
        st.code(content, language='json')
        return None
    except Exception as e:
        st.error(f"Î°úÎìúÎßµ ÏÉùÏÑ± Ï§ë Ïò§Î•ò Î∞úÏÉù: {str(e)}")
        return None

def pdf_export_button_html(file_name):
    """ÌôîÎ©¥ Ï∫°Ï≤ò Î∞è PDF Ï†ÄÏû•ÏùÑ ÏúÑÌïú HTML/JS ÏΩîÎìúÎ•º Î∞òÌôò"""
    button_label = "üì• ÌôîÎ©¥ Ï∫°Ï≤òÌïòÏó¨ PDFÎ°ú Ï†ÄÏû•"
    loading_label = "‚è≥ PDF ÏÉùÏÑ± Ï§ë..."
    
    # f-string Ìè¨Îß∑ÌåÖ Î¨∏Ï†úÎ•º ÌîºÌïòÍ∏∞ ÏúÑÌï¥ Î¨∏ÏûêÏó¥ÏùÑ Î∂ÑÎ¶¨ÌïòÏó¨ Íµ¨ÏÑ±
    script = """
    const exportPdfButton = document.getElementById('export-pdf-btn');
    exportPdfButton.addEventListener('click', function() {
        exportPdfButton.innerText = '""" + loading_label + """';
        exportPdfButton.disabled = true;

        // Streamlit Ïï±Ïùò Î©îÏù∏ Ïª®ÌÖêÏ∏† ÏòÅÏó≠Í≥º Ï†ÑÏ≤¥ bodyÎ•º ÌÉÄÍ≤üÏúºÎ°ú ÏßÄÏ†ï
        const appContainer = window.parent.document.querySelector('[data-testid="stAppViewContainer"]');
        const body = window.parent.document.body;
        
        if (!appContainer) {
            alert('Ï∫°Ï≤òÌï† ÏòÅÏó≠ÏùÑ Ï∞æÏßÄ Î™ªÌñàÏäµÎãàÎã§.');
            exportPdfButton.innerText = '""" + button_label + """';
            exportPdfButton.disabled = false;
            return;
        }

        // Î™®Îì† expander(details ÌÉúÍ∑∏)Î•º Ï∞æÏïÑÏÑú ÏóΩÎãàÎã§.
        const expanders = appContainer.querySelectorAll('details');
        expanders.forEach(expander => {
            if (!expander.open) {
                expander.open = true;
            }
        });

        // Ï∫°Ï≤ò Ï†Ñ Ïä§ÌÅ¨Î°§ÏùÑ Îß® ÏúÑÎ°ú Ïù¥Îèô
        appContainer.scrollTo(0, 0);

        // expanderÍ∞Ä Ïó¥Î¶¨Í≥† UIÍ∞Ä Î†åÎçîÎßÅÎê† ÏãúÍ∞ÑÏùÑ Ï§çÎãàÎã§.
        setTimeout(() => {
            html2canvas(body, { // Ï∫°Ï≤ò ÎåÄÏÉÅÏùÑ bodyÎ°ú Î≥ÄÍ≤Ω
                useCORS: true,
                allowTaint: true,
                scale: 2,
                // bodyÏùò Ï†ÑÏ≤¥ Ïä§ÌÅ¨Î°§ ÌÅ¨Í∏∞Î•º Í∏∞Ï§ÄÏúºÎ°ú Ï∫°Ï≤ò
                width: body.scrollWidth,
                height: body.scrollHeight,
                windowWidth: body.scrollWidth,
                windowHeight: body.scrollHeight
            }).then(canvas => {
                const { jsPDF } = window.jspdf;
                const imgData = canvas.toDataURL('image/png', 1.0);
                
                const pdf = new jsPDF({
                    orientation: 'p',
                    unit: 'mm',
                    format: 'a4'
                });

                const pdfWidth = pdf.internal.pageSize.getWidth();
                const pdfHeight = pdf.internal.pageSize.getHeight();
                const canvasAspectRatio = canvas.width / canvas.height;

                const finalImgWidth = pdfWidth;
                const finalImgHeight = pdfWidth / canvasAspectRatio;
                
                const totalPdfPages = Math.ceil(finalImgHeight / pdfHeight);

                for (let i = 0; i < totalPdfPages; i++) {
                    if (i > 0) {
                        pdf.addPage();
                    }
                    pdf.addImage(imgData, 'PNG', 0, -i * pdfHeight, finalImgWidth, finalImgHeight);
                }

                pdf.save('""" + file_name + """');
                
                exportPdfButton.innerText = '""" + button_label + """';
                exportPdfButton.disabled = false;
            }).catch(err => {
                alert('PDF ÏÉùÏÑ± Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ' + err);
                exportPdfButton.innerText = '""" + button_label + """';
                exportPdfButton.disabled = false;
            });
        }, 1000); // ÎîúÎ†àÏù¥Î•º 1Ï¥àÎ°ú ÎäòÎ¶º
    });
    """
    
    html_code = """
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <style>
        .pdf-btn {
            display: inline-block;
            padding: 0.75rem 1.5rem;
            font-size: 1rem;
            font-weight: 600;
            color: white;
            background-color: #FF4B4B;
            border: none;
            border-radius: 0.5rem;
            cursor: pointer;
            text-align: center;
            width: 100%;
            transition: background-color 0.2s;
        }
        .pdf-btn:hover {
            background-color: #E03A3A;
        }
        .pdf-btn:disabled {
            background-color: #A0A0A0;
            cursor: not-allowed;
        }
    </style>
    <button id="export-pdf-btn" class="pdf-btn">""" + button_label + """</button>
    <script>
    """ + script + """
    </script>
    """
    return html_code

# --- ÏÇ¨Ïù¥ÎìúÎ∞î UI ---
with st.sidebar:
    st.header("‚öôÔ∏è ÏÑ§Ï†ï")
    
    dev_mode = st.checkbox("üîß Í∞úÎ∞úÏûê Î™®Îìú", value=st.session_state.current_dev_mode, help="Í≥†Í∏â ÏÑ§Ï†ï Î∞è Îã§ÏñëÌïú Î™®Îç∏ ÏÑ†ÌÉù Í∞ÄÎä•")
    st.session_state.current_dev_mode = dev_mode
    
    api_key_input = st.text_input(
        "OpenAI API Key", value=st.session_state.openai_api_key, type="password", help="OpenAI API ÌÇ§Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
    )
    if api_key_input != st.session_state.openai_api_key:
        st.session_state.openai_api_key = api_key_input
        init_openai()

    if st.button("API ÌÇ§ ÌôïÏù∏ Î∞è Ï†ÅÏö©"):
        if init_openai():
            st.success("‚úÖ API ÌÇ§Í∞Ä ÌôïÏù∏ Î∞è Ï†ÅÏö©ÎêòÏóàÏäµÎãàÎã§!")
        else:
            st.error("‚ùå Ïú†Ìö®Ìïú API ÌÇ§Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.")

    if dev_mode:
        st.markdown("---")
        st.subheader("ü§ñ Î™®Îç∏ ÏÑ§Ï†ï (Í∞úÎ∞úÏûêÏö©)")
        st.session_state.current_model = st.selectbox(
            "ÏÇ¨Ïö©Ìï† Î™®Îç∏", ["gpt-4o-mini", "gpt-4o", "gpt-4-turbo", "gpt-3.5-turbo"], 
            index=["gpt-4o-mini", "gpt-4o", "gpt-4-turbo", "gpt-3.5-turbo"].index(st.session_state.current_model)
        )
        st.session_state.current_temperature = st.slider("Temperature", 0.0, 2.0, st.session_state.current_temperature, 0.1)
        st.session_state.current_max_tokens = st.number_input("Max Tokens", 500, 8000, st.session_state.current_max_tokens, 100)

# --- Î©îÏù∏ UI ---
st.title("üó∫Ô∏è AI ÌïôÏäµ Î°úÎìúÎßµ ÏÉùÏÑ±Í∏∞")
st.markdown("ÌïôÏäµÌïòÍ≥† Ïã∂ÏùÄ Ï£ºÏ†úÏôÄ ÌòÑÏû¨ ÏàòÏ§ÄÏùÑ ÏûÖÎ†•ÌïòÎ©¥ AIÍ∞Ä ÎßûÏ∂§Ìòï ÌïôÏäµ Í≥ÑÌöçÏùÑ ÏßúÎìúÎ¶ΩÎãàÎã§.")

# --- ÏûÖÎ†• Ìèº ---
with st.form("roadmap_form"):
    col1, col2 = st.columns(2)
    with col1:
        st.session_state.current_topic = st.text_input(
            "ÌïôÏäµÌïòÍ≥† Ïã∂ÏùÄ Ï£ºÏ†ú", value=st.session_state.current_topic, placeholder="Ïòà: Unity ML-Agents, React Native, Docker"
        )
        st.session_state.current_level = st.selectbox(
            "ÌòÑÏû¨ ÏàòÏ§Ä", ["ÏôÑÏ†Ñ Ï¥àÎ≥¥", "Í∏∞Ï¥à ÏßÄÏãù ÏûàÏùå", "Ï§ëÍ∏â", "Í≥†Í∏â"], 
            index=["ÏôÑÏ†Ñ Ï¥àÎ≥¥", "Í∏∞Ï¥à ÏßÄÏãù ÏûàÏùå", "Ï§ëÍ∏â", "Í≥†Í∏â"].index(st.session_state.current_level)
        )
    with col2:
        st.session_state.current_duration = st.selectbox(
            "ÌïôÏäµ Í∏∞Í∞Ñ", ["2Ï£º", "1Í∞úÏõî", "2Í∞úÏõî", "3Í∞úÏõî", "6Í∞úÏõî"], 
            index=["2Ï£º", "1Í∞úÏõî", "2Í∞úÏõî", "3Í∞úÏõî", "6Í∞úÏõî"].index(st.session_state.current_duration)
        )
    
    st.session_state.current_detailed_level = st.text_area(
        "ÌòÑÏû¨ ÏàòÏ§Ä ÏÉÅÏÑ∏ ÏÑ§Î™Ö (ÏÑ†ÌÉùÏÇ¨Ìï≠, Îçî Ï†ïÌôïÌïú Í≤∞Í≥ºÎ•º ÏúÑÌï¥ Ï∂îÏ≤ú)", 
        value=st.session_state.current_detailed_level,
        placeholder="Ïòà: Unity Í∏∞Î≥∏ ÏÇ¨Ïö©Î≤ïÏùÄ ÏïåÍ≥† ÏûàÍ≥†, C# Ïä§ÌÅ¨Î¶ΩÌåÖÎèÑ Ìï† Ïàò ÏûàÏßÄÎßå ML-AgentsÎäî Ï≤òÏùåÏûÖÎãàÎã§. Î®∏Ïã†Îü¨Îãù Í∞úÎÖêÏùÄ ÎåÄÌïôÍµêÏóêÏÑú Î∞∞Ïõ†ÏßÄÎßå Ïã§Ï†ú Íµ¨ÌòÑ Í≤ΩÌóòÏùÄ ÏóÜÏäµÎãàÎã§."
    )

    submitted = st.form_submit_button("üöÄ Î°úÎìúÎßµ ÏÉùÏÑ±", type="primary", use_container_width=True)

# --- Î°úÎìúÎßµ ÏÉùÏÑ± Î°úÏßÅ ---
if submitted:
    if not st.session_state.openai_client:
        st.error("‚ùå OpenAI API ÌÇ§Î•º ÏÇ¨Ïù¥ÎìúÎ∞îÏóêÏÑú Î®ºÏ†Ä ÏÑ§Ï†ïÌï¥Ï£ºÏÑ∏Ïöî!")
    elif not st.session_state.current_topic:
        st.error("‚ùå ÌïôÏäµ Ï£ºÏ†úÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî!")
    else:
        with st.spinner("ü§ñ AIÍ∞Ä ÏµúÏã† Ï†ïÎ≥¥ Í∏∞Î∞ò Î°úÎìúÎßµÏùÑ ÏÉùÏÑ±ÌïòÍ≥† ÏûàÏäµÎãàÎã§..."):
            roadmap_data = generate_roadmap(
                st.session_state.current_topic, 
                st.session_state.current_level, 
                st.session_state.current_detailed_level, 
                st.session_state.current_duration,
                st.session_state.current_model,
                st.session_state.current_temperature,
                st.session_state.current_max_tokens
            )
        
        if roadmap_data:
            st.session_state.generated_roadmap = roadmap_data
            st.success("‚úÖ Î°úÎìúÎßµÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§! ÏïÑÎûòÏóêÏÑú ÎÇ¥Ïö©ÏùÑ ÌôïÏù∏ÌïòÏÑ∏Ïöî.")
        else:
            st.error("‚ùå Î°úÎìúÎßµ ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌïòÍ±∞ÎÇò, Í∞úÎ∞úÏûê Î™®ÎìúÏóêÏÑú Î™®Îç∏ ÏÑ§Ï†ïÏùÑ Î≥ÄÍ≤ΩÌï¥Î≥¥ÏÑ∏Ïöî.")

# --- Î°úÎìúÎßµ ÌëúÏãú Î°úÏßÅ (ÏÉùÏÑ±Îêú Í≤ΩÏö∞ÏóêÎßå Î≥¥ÏûÑ) ---
if st.session_state.generated_roadmap:
    roadmap_data = st.session_state.generated_roadmap
    topic = st.session_state.current_topic

    st.markdown("---")
    st.header(f"üìã {topic} ÌïôÏäµ Î°úÎìúÎßµ")
    
    # Î©îÌÉÄ Ï†ïÎ≥¥
    meta_col1, meta_col2 = st.columns([3, 1])
    with meta_col1:
        st.info(f"üìÖ **ÏµúÏã† Î≤ÑÏ†Ñ Í∏∞Ï§Ä**: {roadmap_data.get('version_info', 'Ï†ïÎ≥¥ ÏóÜÏùå')} (ÏÉùÏÑ±Ïùº: {roadmap_data.get('last_updated', 'Ï†ïÎ≥¥ ÏóÜÏùå')})")
    if st.session_state.current_dev_mode:
        with meta_col2:
            st.info(f"ü§ñ **ÏÇ¨Ïö© Î™®Îç∏**: {st.session_state.current_model}")
    
    # ÏÇ¨Ï†Ñ ÏöîÍµ¨ÏÇ¨Ìï≠
    if 'prerequisites' in roadmap_data and roadmap_data['prerequisites']:
        with st.container(border=True):
            st.subheader("üìå ÏÇ¨Ï†Ñ ÏöîÍµ¨ÏÇ¨Ìï≠")
            for prereq in roadmap_data['prerequisites']:
                st.write(f"‚Ä¢ {prereq}")
    
    # Ï£ºÏ∞®Î≥Ñ Í≥ÑÌöç
    st.subheader("üìÖ Ï£ºÏ∞®Î≥Ñ ÌïôÏäµ Í≥ÑÌöç")
    for week_data in roadmap_data.get('roadmap', []):
        with st.expander(f"üìñ **{week_data.get('week', 'X')}Ï£ºÏ∞®: {week_data.get('title', 'Ï†úÎ™© ÏóÜÏùå')}**", expanded=True):
            w_col1, w_col2 = st.columns(2)
            with w_col1:
                st.markdown("**üìö ÌïôÏäµ Ï£ºÏ†ú:**")
                for item in week_data.get('topics', []): st.write(f"‚Ä¢ {item}")
                st.markdown("**üéØ Î™©Ìëú:**")
                st.write(week_data.get('goals', ''))
            with w_col2:
                st.markdown("**üõ†Ô∏è Ïã§Ïäµ Í≥ºÏ†ú:**")
                for item in week_data.get('practical_tasks', []): st.write(f"‚Ä¢ {item}")
                st.markdown("**üì¶ ÏôÑÏÑ± Î™©Ìëú:**")
                for item in week_data.get('deliverables', []): st.write(f"‚úÖ {item}")

            st.markdown("**üîó ÌïôÏäµ ÏûêÎ£å:**")
            for item in week_data.get('resources', []): st.write(f"‚Ä¢ {item}")

            if 'week_specific_keywords' in week_data and week_data['week_specific_keywords']:
                st.markdown("**üîç Ïù¥Î≤à Ï£º ÌäπÌôî Í≤ÄÏÉâ ÌÇ§ÏõåÎìú:**")
                keywords = ", ".join([f"`{k}`" for k in week_data['week_specific_keywords']])
                st.write(keywords)

    # ÏµúÏ¢Ö Î™©Ìëú Î∞è ÎÇúÏù¥ÎèÑ
    final_col1, final_col2 = st.columns(2)
    with final_col1:
        if 'final_goals' in roadmap_data and roadmap_data['final_goals']:
            st.subheader("üèÜ ÏµúÏ¢Ö ÏôÑÏÑ± Î™©Ìëú")
            for goal in roadmap_data['final_goals']:
                st.write(f"‚Ä¢ {goal}")
    with final_col2:
        if 'difficulty_progression' in roadmap_data:
            st.subheader("ÔøΩ ÎÇúÏù¥ÎèÑ ÏßÑÌñâ")
            st.info(roadmap_data['difficulty_progression'])

    # --- ÎÇ¥Î≥¥ÎÇ¥Í∏∞ Í∏∞Îä• (ÌôîÎ©¥ Ï∫°Ï≤ò Î∞©Ïãù) ---
    st.markdown("---")
    st.header("üìÑ Î°úÎìúÎßµ ÎÇ¥Î≥¥ÎÇ¥Í∏∞ (ÌôîÎ©¥ Ï∫°Ï≤ò)")
    st.info("ÏïÑÎûò Î≤ÑÌäºÏùÑ ÎàÑÎ•¥Î©¥ ÌòÑÏû¨ Î≥¥Ïù¥Îäî Ï†ÑÏ≤¥ ÌéòÏù¥ÏßÄÍ∞Ä Ïä§ÌÅ¨Î¶∞ÏÉ∑ ÌòïÌÉúÎ°ú PDFÏóê Ï†ÄÏû•Îê©ÎãàÎã§.")
    
    current_time_filename = datetime.now().strftime("%Y%m%d_%H%M")
    filename = f"AI_Roadmap_{topic.replace(' ', '_')}_{current_time_filename}.pdf"
    
    html_code = pdf_export_button_html(filename)
    components.html(html_code, height=50)


# --- Ìë∏ÌÑ∞ ---
st.markdown("---")
st.markdown("üí° **ÌåÅ**: ÌòÑÏû¨ ÏàòÏ§ÄÏùÑ ÏÉÅÏÑ∏Ìûà ÏÑ§Î™ÖÌï†ÏàòÎ°ù Îçî Íµ¨Ï≤¥Ï†ÅÏù¥Í≥† Ïã§Ìñâ Í∞ÄÎä•Ìïú Î°úÎìúÎßµÏùÑ Î∞õÏùÑ Ïàò ÏûàÏäµÎãàÎã§!")
st.markdown("üéØ **Î™©Ìëú**: Í∞Å Ï£ºÏ∞®Î≥ÑÎ°ú Ïã§Ï†ú ÏôÑÏÑ±Ìï† Ïàò ÏûàÎäî Íµ¨Ï≤¥Ï†ÅÏù∏ Í≤∞Í≥ºÎ¨ºÏù¥ ÏûàÎäî Î°úÎìúÎßµ")
st.markdown("üîÑ **ÏµúÏã†ÏÑ± Î≥¥Ïû•**: Î™®Îì† Î°úÎìúÎßµÏùÄ 2025ÎÖÑ ÏµúÏã† Î≤ÑÏ†Ñ Í∏∞Ï§ÄÏúºÎ°ú ÏÉùÏÑ±Îê©ÎãàÎã§.")
